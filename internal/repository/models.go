// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repository

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type Gender string

const (
	GenderM Gender = "m"
	GenderF Gender = "f"
)

func (e *Gender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Gender(s)
	case string:
		*e = Gender(s)
	default:
		return fmt.Errorf("unsupported scan type for Gender: %T", src)
	}
	return nil
}

type NullGender struct {
	Gender Gender
	Valid  bool // Valid is true if Gender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGender) Scan(value interface{}) error {
	if value == nil {
		ns.Gender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Gender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Gender), nil
}

func (e Gender) Valid() bool {
	switch e {
	case GenderM,
		GenderF:
		return true
	}
	return false
}

func AllGenderValues() []Gender {
	return []Gender{
		GenderM,
		GenderF,
	}
}

type File struct {
	ID        uuid.UUID          `db:"id"`
	Url       string             `db:"url"`
	Name      string             `db:"name"`
	Type      string             `db:"type"`
	Hash      string             `db:"hash"`
	CreatedAt pgtype.Timestamptz `db:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at"`
	DeletedAt pgtype.Timestamptz `db:"deleted_at"`
}

type Permission struct {
	ID         uuid.UUID          `db:"id"`
	Permission string             `db:"permission"`
	CreatedAt  pgtype.Timestamptz `db:"created_at"`
	UpdatedAt  pgtype.Timestamptz `db:"updated_at"`
}

type Profile struct {
	ID           uuid.UUID          `db:"id"`
	UserID       uuid.UUID          `db:"user_id"`
	DisplayName  pgtype.Text        `db:"display_name"`
	Occupation   pgtype.Text        `db:"occupation"`
	Organization pgtype.Text        `db:"organization"`
	Gender       NullGender         `db:"gender"`
	PhotoUrl     pgtype.Text        `db:"photo_url"`
	Bio          pgtype.Text        `db:"bio"`
	CreatedAt    pgtype.Timestamptz `db:"created_at"`
	UpdatedAt    pgtype.Timestamptz `db:"updated_at"`
}

type Role struct {
	ID        uuid.UUID          `db:"id"`
	Name      string             `db:"name"`
	CreatedAt pgtype.Timestamptz `db:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at"`
}

type RolePermission struct {
	RoleID       uuid.UUID          `db:"role_id"`
	PermissionID uuid.UUID          `db:"permission_id"`
	CreatedAt    pgtype.Timestamptz `db:"created_at"`
}

type User struct {
	ID           uuid.UUID          `db:"id"`
	Email        string             `db:"email"`
	HashPassword string             `db:"hash_password"`
	EmailActive  bool               `db:"email_active"`
	CreatedAt    pgtype.Timestamptz `db:"created_at"`
	UpdatedAt    pgtype.Timestamptz `db:"updated_at"`
	DeletedAt    pgtype.Timestamptz `db:"deleted_at"`
}

type UserPermission struct {
	UserID       uuid.UUID          `db:"user_id"`
	PermissionID uuid.UUID          `db:"permission_id"`
	CreatedAt    pgtype.Timestamptz `db:"created_at"`
}

type UserRole struct {
	UserID    uuid.UUID          `db:"user_id"`
	RoleID    uuid.UUID          `db:"role_id"`
	CreatedAt pgtype.Timestamptz `db:"created_at"`
}
